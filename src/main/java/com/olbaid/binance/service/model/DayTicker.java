/*
 * Binance Public Spot API
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.olbaid.binance.service.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * DayTicker
 */
@JsonPropertyOrder({
  DayTicker.JSON_PROPERTY_SYMBOL,
  DayTicker.JSON_PROPERTY_PRICE_CHANGE,
  DayTicker.JSON_PROPERTY_PRICE_CHANGE_PERCENT,
  DayTicker.JSON_PROPERTY_WEIGHTED_AVG_PRICE,
  DayTicker.JSON_PROPERTY_OPEN_PRICE,
  DayTicker.JSON_PROPERTY_HIGH_PRICE,
  DayTicker.JSON_PROPERTY_LOW_PRICE,
  DayTicker.JSON_PROPERTY_LAST_PRICE,
  DayTicker.JSON_PROPERTY_VOLUME,
  DayTicker.JSON_PROPERTY_QUOTE_VOLUME,
  DayTicker.JSON_PROPERTY_OPEN_TIME,
  DayTicker.JSON_PROPERTY_CLOSE_TIME,
  DayTicker.JSON_PROPERTY_FIRST_ID,
  DayTicker.JSON_PROPERTY_LAST_ID,
  DayTicker.JSON_PROPERTY_COUNT
})
@JsonTypeName("dayTicker")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DayTicker {
  public static final String JSON_PROPERTY_SYMBOL = "symbol";
  private String symbol;

  public static final String JSON_PROPERTY_PRICE_CHANGE = "priceChange";
  private String priceChange;

  public static final String JSON_PROPERTY_PRICE_CHANGE_PERCENT = "priceChangePercent";
  private String priceChangePercent;

  public static final String JSON_PROPERTY_WEIGHTED_AVG_PRICE = "weightedAvgPrice";
  private String weightedAvgPrice;

  public static final String JSON_PROPERTY_OPEN_PRICE = "openPrice";
  private String openPrice;

  public static final String JSON_PROPERTY_HIGH_PRICE = "highPrice";
  private String highPrice;

  public static final String JSON_PROPERTY_LOW_PRICE = "lowPrice";
  private String lowPrice;

  public static final String JSON_PROPERTY_LAST_PRICE = "lastPrice";
  private String lastPrice;

  public static final String JSON_PROPERTY_VOLUME = "volume";
  private String volume;

  public static final String JSON_PROPERTY_QUOTE_VOLUME = "quoteVolume";
  private String quoteVolume;

  public static final String JSON_PROPERTY_OPEN_TIME = "openTime";
  private Long openTime;

  public static final String JSON_PROPERTY_CLOSE_TIME = "closeTime";
  private Long closeTime;

  public static final String JSON_PROPERTY_FIRST_ID = "firstId";
  private Long firstId;

  public static final String JSON_PROPERTY_LAST_ID = "lastId";
  private Long lastId;

  public static final String JSON_PROPERTY_COUNT = "count";
  private Long count;

  public DayTicker() {
  }

  public DayTicker symbol(String symbol) {
    
    this.symbol = symbol;
    return this;
  }

   /**
   * Get symbol
   * @return symbol
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "BTCUSDT", required = true, value = "")
  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSymbol() {
    return symbol;
  }


  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }


  public DayTicker priceChange(String priceChange) {
    
    this.priceChange = priceChange;
    return this;
  }

   /**
   * Absolute price change
   * @return priceChange
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "-83.13000000", required = true, value = "Absolute price change")
  @JsonProperty(JSON_PROPERTY_PRICE_CHANGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPriceChange() {
    return priceChange;
  }


  @JsonProperty(JSON_PROPERTY_PRICE_CHANGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPriceChange(String priceChange) {
    this.priceChange = priceChange;
  }


  public DayTicker priceChangePercent(String priceChangePercent) {
    
    this.priceChangePercent = priceChangePercent;
    return this;
  }

   /**
   * Relative price change in percent
   * @return priceChangePercent
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "-0.317", required = true, value = "Relative price change in percent")
  @JsonProperty(JSON_PROPERTY_PRICE_CHANGE_PERCENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPriceChangePercent() {
    return priceChangePercent;
  }


  @JsonProperty(JSON_PROPERTY_PRICE_CHANGE_PERCENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPriceChangePercent(String priceChangePercent) {
    this.priceChangePercent = priceChangePercent;
  }


  public DayTicker weightedAvgPrice(String weightedAvgPrice) {
    
    this.weightedAvgPrice = weightedAvgPrice;
    return this;
  }

   /**
   * quoteVolume / volume
   * @return weightedAvgPrice
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "26234.58803036", required = true, value = "quoteVolume / volume")
  @JsonProperty(JSON_PROPERTY_WEIGHTED_AVG_PRICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getWeightedAvgPrice() {
    return weightedAvgPrice;
  }


  @JsonProperty(JSON_PROPERTY_WEIGHTED_AVG_PRICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setWeightedAvgPrice(String weightedAvgPrice) {
    this.weightedAvgPrice = weightedAvgPrice;
  }


  public DayTicker openPrice(String openPrice) {
    
    this.openPrice = openPrice;
    return this;
  }

   /**
   * Get openPrice
   * @return openPrice
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "26304.80000000", required = true, value = "")
  @JsonProperty(JSON_PROPERTY_OPEN_PRICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getOpenPrice() {
    return openPrice;
  }


  @JsonProperty(JSON_PROPERTY_OPEN_PRICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOpenPrice(String openPrice) {
    this.openPrice = openPrice;
  }


  public DayTicker highPrice(String highPrice) {
    
    this.highPrice = highPrice;
    return this;
  }

   /**
   * Get highPrice
   * @return highPrice
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "26397.46000000", required = true, value = "")
  @JsonProperty(JSON_PROPERTY_HIGH_PRICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getHighPrice() {
    return highPrice;
  }


  @JsonProperty(JSON_PROPERTY_HIGH_PRICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHighPrice(String highPrice) {
    this.highPrice = highPrice;
  }


  public DayTicker lowPrice(String lowPrice) {
    
    this.lowPrice = lowPrice;
    return this;
  }

   /**
   * Get lowPrice
   * @return lowPrice
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "26088.34000000", required = true, value = "")
  @JsonProperty(JSON_PROPERTY_LOW_PRICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getLowPrice() {
    return lowPrice;
  }


  @JsonProperty(JSON_PROPERTY_LOW_PRICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLowPrice(String lowPrice) {
    this.lowPrice = lowPrice;
  }


  public DayTicker lastPrice(String lastPrice) {
    
    this.lastPrice = lastPrice;
    return this;
  }

   /**
   * Get lastPrice
   * @return lastPrice
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "26221.67000000", required = true, value = "")
  @JsonProperty(JSON_PROPERTY_LAST_PRICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getLastPrice() {
    return lastPrice;
  }


  @JsonProperty(JSON_PROPERTY_LAST_PRICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLastPrice(String lastPrice) {
    this.lastPrice = lastPrice;
  }


  public DayTicker volume(String volume) {
    
    this.volume = volume;
    return this;
  }

   /**
   * Volume in base asset
   * @return volume
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "18495.35066000", required = true, value = "Volume in base asset")
  @JsonProperty(JSON_PROPERTY_VOLUME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getVolume() {
    return volume;
  }


  @JsonProperty(JSON_PROPERTY_VOLUME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVolume(String volume) {
    this.volume = volume;
  }


  public DayTicker quoteVolume(String quoteVolume) {
    
    this.quoteVolume = quoteVolume;
    return this;
  }

   /**
   * Volume in quote asset
   * @return quoteVolume
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "485217905.04210480", required = true, value = "Volume in quote asset")
  @JsonProperty(JSON_PROPERTY_QUOTE_VOLUME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getQuoteVolume() {
    return quoteVolume;
  }


  @JsonProperty(JSON_PROPERTY_QUOTE_VOLUME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setQuoteVolume(String quoteVolume) {
    this.quoteVolume = quoteVolume;
  }


  public DayTicker openTime(Long openTime) {
    
    this.openTime = openTime;
    return this;
  }

   /**
   * Get openTime
   * @return openTime
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "1695686400000", required = true, value = "")
  @JsonProperty(JSON_PROPERTY_OPEN_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getOpenTime() {
    return openTime;
  }


  @JsonProperty(JSON_PROPERTY_OPEN_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOpenTime(Long openTime) {
    this.openTime = openTime;
  }


  public DayTicker closeTime(Long closeTime) {
    
    this.closeTime = closeTime;
    return this;
  }

   /**
   * Get closeTime
   * @return closeTime
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "1695772799999", required = true, value = "")
  @JsonProperty(JSON_PROPERTY_CLOSE_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getCloseTime() {
    return closeTime;
  }


  @JsonProperty(JSON_PROPERTY_CLOSE_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCloseTime(Long closeTime) {
    this.closeTime = closeTime;
  }


  public DayTicker firstId(Long firstId) {
    
    this.firstId = firstId;
    return this;
  }

   /**
   * Trade ID of the first trade in the interval
   * @return firstId
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "3220151555", required = true, value = "Trade ID of the first trade in the interval")
  @JsonProperty(JSON_PROPERTY_FIRST_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getFirstId() {
    return firstId;
  }


  @JsonProperty(JSON_PROPERTY_FIRST_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFirstId(Long firstId) {
    this.firstId = firstId;
  }


  public DayTicker lastId(Long lastId) {
    
    this.lastId = lastId;
    return this;
  }

   /**
   * Trade ID of the last trade in the interval
   * @return lastId
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "3220849281", required = true, value = "Trade ID of the last trade in the interval")
  @JsonProperty(JSON_PROPERTY_LAST_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getLastId() {
    return lastId;
  }


  @JsonProperty(JSON_PROPERTY_LAST_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLastId(Long lastId) {
    this.lastId = lastId;
  }


  public DayTicker count(Long count) {
    
    this.count = count;
    return this;
  }

   /**
   * Number of trades in the interval
   * @return count
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "697727", required = true, value = "Number of trades in the interval")
  @JsonProperty(JSON_PROPERTY_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getCount() {
    return count;
  }


  @JsonProperty(JSON_PROPERTY_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCount(Long count) {
    this.count = count;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DayTicker dayTicker = (DayTicker) o;
    return Objects.equals(this.symbol, dayTicker.symbol) &&
        Objects.equals(this.priceChange, dayTicker.priceChange) &&
        Objects.equals(this.priceChangePercent, dayTicker.priceChangePercent) &&
        Objects.equals(this.weightedAvgPrice, dayTicker.weightedAvgPrice) &&
        Objects.equals(this.openPrice, dayTicker.openPrice) &&
        Objects.equals(this.highPrice, dayTicker.highPrice) &&
        Objects.equals(this.lowPrice, dayTicker.lowPrice) &&
        Objects.equals(this.lastPrice, dayTicker.lastPrice) &&
        Objects.equals(this.volume, dayTicker.volume) &&
        Objects.equals(this.quoteVolume, dayTicker.quoteVolume) &&
        Objects.equals(this.openTime, dayTicker.openTime) &&
        Objects.equals(this.closeTime, dayTicker.closeTime) &&
        Objects.equals(this.firstId, dayTicker.firstId) &&
        Objects.equals(this.lastId, dayTicker.lastId) &&
        Objects.equals(this.count, dayTicker.count);
  }

  @Override
  public int hashCode() {
    return Objects.hash(symbol, priceChange, priceChangePercent, weightedAvgPrice, openPrice, highPrice, lowPrice, lastPrice, volume, quoteVolume, openTime, closeTime, firstId, lastId, count);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DayTicker {\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    priceChange: ").append(toIndentedString(priceChange)).append("\n");
    sb.append("    priceChangePercent: ").append(toIndentedString(priceChangePercent)).append("\n");
    sb.append("    weightedAvgPrice: ").append(toIndentedString(weightedAvgPrice)).append("\n");
    sb.append("    openPrice: ").append(toIndentedString(openPrice)).append("\n");
    sb.append("    highPrice: ").append(toIndentedString(highPrice)).append("\n");
    sb.append("    lowPrice: ").append(toIndentedString(lowPrice)).append("\n");
    sb.append("    lastPrice: ").append(toIndentedString(lastPrice)).append("\n");
    sb.append("    volume: ").append(toIndentedString(volume)).append("\n");
    sb.append("    quoteVolume: ").append(toIndentedString(quoteVolume)).append("\n");
    sb.append("    openTime: ").append(toIndentedString(openTime)).append("\n");
    sb.append("    closeTime: ").append(toIndentedString(closeTime)).append("\n");
    sb.append("    firstId: ").append(toIndentedString(firstId)).append("\n");
    sb.append("    lastId: ").append(toIndentedString(lastId)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

