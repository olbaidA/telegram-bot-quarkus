/*
 * Binance Public Spot API
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.olbaid.binance.service.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ApiV3ExchangeInfoGet200ResponseSymbolsInnerFiltersInner
 */
@JsonPropertyOrder({
  ApiV3ExchangeInfoGet200ResponseSymbolsInnerFiltersInner.JSON_PROPERTY_FILTER_TYPE,
  ApiV3ExchangeInfoGet200ResponseSymbolsInnerFiltersInner.JSON_PROPERTY_MIN_PRICE,
  ApiV3ExchangeInfoGet200ResponseSymbolsInnerFiltersInner.JSON_PROPERTY_MAX_PRICE,
  ApiV3ExchangeInfoGet200ResponseSymbolsInnerFiltersInner.JSON_PROPERTY_TICK_SIZE
})
@JsonTypeName("_api_v3_exchangeInfo_get_200_response_symbols_inner_filters_inner")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ApiV3ExchangeInfoGet200ResponseSymbolsInnerFiltersInner {
  public static final String JSON_PROPERTY_FILTER_TYPE = "filterType";
  private String filterType;

  public static final String JSON_PROPERTY_MIN_PRICE = "minPrice";
  private String minPrice;

  public static final String JSON_PROPERTY_MAX_PRICE = "maxPrice";
  private String maxPrice;

  public static final String JSON_PROPERTY_TICK_SIZE = "tickSize";
  private String tickSize;

  public ApiV3ExchangeInfoGet200ResponseSymbolsInnerFiltersInner() {
  }

  public ApiV3ExchangeInfoGet200ResponseSymbolsInnerFiltersInner filterType(String filterType) {
    
    this.filterType = filterType;
    return this;
  }

   /**
   * Get filterType
   * @return filterType
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "PRICE_FILTER", required = true, value = "")
  @JsonProperty(JSON_PROPERTY_FILTER_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFilterType() {
    return filterType;
  }


  @JsonProperty(JSON_PROPERTY_FILTER_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFilterType(String filterType) {
    this.filterType = filterType;
  }


  public ApiV3ExchangeInfoGet200ResponseSymbolsInnerFiltersInner minPrice(String minPrice) {
    
    this.minPrice = minPrice;
    return this;
  }

   /**
   * Get minPrice
   * @return minPrice
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "0.00000100", required = true, value = "")
  @JsonProperty(JSON_PROPERTY_MIN_PRICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMinPrice() {
    return minPrice;
  }


  @JsonProperty(JSON_PROPERTY_MIN_PRICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMinPrice(String minPrice) {
    this.minPrice = minPrice;
  }


  public ApiV3ExchangeInfoGet200ResponseSymbolsInnerFiltersInner maxPrice(String maxPrice) {
    
    this.maxPrice = maxPrice;
    return this;
  }

   /**
   * Get maxPrice
   * @return maxPrice
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "100000.00000000", required = true, value = "")
  @JsonProperty(JSON_PROPERTY_MAX_PRICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMaxPrice() {
    return maxPrice;
  }


  @JsonProperty(JSON_PROPERTY_MAX_PRICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMaxPrice(String maxPrice) {
    this.maxPrice = maxPrice;
  }


  public ApiV3ExchangeInfoGet200ResponseSymbolsInnerFiltersInner tickSize(String tickSize) {
    
    this.tickSize = tickSize;
    return this;
  }

   /**
   * Get tickSize
   * @return tickSize
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "0.00000100", required = true, value = "")
  @JsonProperty(JSON_PROPERTY_TICK_SIZE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTickSize() {
    return tickSize;
  }


  @JsonProperty(JSON_PROPERTY_TICK_SIZE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTickSize(String tickSize) {
    this.tickSize = tickSize;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiV3ExchangeInfoGet200ResponseSymbolsInnerFiltersInner apiV3ExchangeInfoGet200ResponseSymbolsInnerFiltersInner = (ApiV3ExchangeInfoGet200ResponseSymbolsInnerFiltersInner) o;
    return Objects.equals(this.filterType, apiV3ExchangeInfoGet200ResponseSymbolsInnerFiltersInner.filterType) &&
        Objects.equals(this.minPrice, apiV3ExchangeInfoGet200ResponseSymbolsInnerFiltersInner.minPrice) &&
        Objects.equals(this.maxPrice, apiV3ExchangeInfoGet200ResponseSymbolsInnerFiltersInner.maxPrice) &&
        Objects.equals(this.tickSize, apiV3ExchangeInfoGet200ResponseSymbolsInnerFiltersInner.tickSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filterType, minPrice, maxPrice, tickSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiV3ExchangeInfoGet200ResponseSymbolsInnerFiltersInner {\n");
    sb.append("    filterType: ").append(toIndentedString(filterType)).append("\n");
    sb.append("    minPrice: ").append(toIndentedString(minPrice)).append("\n");
    sb.append("    maxPrice: ").append(toIndentedString(maxPrice)).append("\n");
    sb.append("    tickSize: ").append(toIndentedString(tickSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

